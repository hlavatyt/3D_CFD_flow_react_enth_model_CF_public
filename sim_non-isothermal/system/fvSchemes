/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


ddtSchemes
{
    //~ default         Euler;
    default         steadyState;
}

gradSchemes
{
    default         Gauss linear;
    grad(U)         cellLimited Gauss linear 1;
}

divSchemes
{
    default         none;
    div(phi,U)      bounded Gauss linearUpwindV grad(U);
    
    div(phi,K)      bounded Gauss limitedLinear 0.2;
    div(phi,h)      bounded Gauss limitedLinear 0.2;
    
    div(phi,k)      bounded Gauss upwind;
    div(phi,omega)  bounded Gauss upwind;
    div(phi,epsilon) bounded Gauss limitedLinear 0.2;
    
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
    
    //~ div((phi*Cp),T) bounded Gauss limitedLinear 0.2;	
    //~ div(phi,(0.5*magSqr(U)))     bounded Gauss limitedLinear 0.2;
    //~ div(phi,T)     bounded Gauss limitedLinear 0.2;
    //~ div(phiRho,T) bounded Gauss linearUpwind grad(T);
    //~ div((phiRhoCp),T) bounded Gauss linearUpwind grad(T);
    //~ div(phiRho,(0.5*magSqr(U)))     bounded Gauss linearUpwind grad(T);
    //~ div(phi,T)     bounded Gauss linearUpwind grad(T);
    
    // enthalpicke bilance, stare
    //div(phiRho,T)   bounded Gauss upwind;
    //div(phiRhoCp,T) bounded Gauss upwind;
    //div(phiRho,(0.5*magSqr(U)))   bounded Gauss  upwind;
    //div(phi,T)     bounded Gauss upwind;
    //div(phiRho,h)  bounded Gauss upwind;
    
    //enthalpicke bilance, nove
    div(phiRho,T)   bounded Gauss linearUpwind grad(T);
    // div(phiRhoCp,T) bounded Gauss linearUpwind grad(T);
    div(phiRhoCp,T) bounded Gauss upwind;;
    div(phiRho,(0.5*magSqr(U)))   bounded Gauss upwind;
    div(phi,T)     bounded Gauss linearUpwind grad(T);
    //div(phiRho,h)  bounded Gauss linear;
    
    // puvodni 
    div(phiRhoCp,CO)    bounded Gauss linearUpwind grad(CO);
     div(phiRhoCp,O2)    bounded Gauss linearUpwind grad(O2);
     div(phiRhoCp,CO2)    bounded Gauss linearUpwind grad(CO2);
     div(phi,CO)    bounded Gauss linearUpwind grad(CO);
     div(phiU,CO)    bounded Gauss linearUpwind grad(CO);
     div(phiU,O2)    bounded Gauss linearUpwind grad(O2);
     div(phiU,CO2)    bounded Gauss linearUpwind grad(CO2);
     div(phi,NO)    bounded Gauss linearUpwind grad(NO);
     div(phi,O2)    bounded Gauss linearUpwind grad(O2);
     div(phi,CO2)   bounded Gauss linearUpwind grad(CO2);
     div(phi,N2)    bounded Gauss linearUpwind grad(N2);
     div(phi,N2O)   bounded Gauss linearUpwind grad(N2O);
    div(phiV,CO)    bounded Gauss linearUpwind grad(CO);
    div(phiV,NO)    bounded Gauss linearUpwind grad(NO);
    div(phiV,O2)    bounded Gauss linearUpwind grad(O2);
    div(phiV,CO2)   bounded Gauss linearUpwind grad(CO2);
    div(phiV,N2)    bounded Gauss linearUpwind grad(N2);
    div(phiV,N2O)   bounded Gauss linearUpwind grad(N2O);

     /*div(phiRhoCp,CO)    bounded Gauss upwind;
     div(phiRhoCp,O2)    bounded Gauss upwind;
     div(phiRhoCp,CO2)    bounded Gauss upwind;
     div(phi,CO)    bounded Gauss upwind;
     div(phiU,CO)    bounded Gauss upwind;
     div(phi,NO)    bounded Gauss upwind;
     div(phi,O2)    bounded Gauss upwind;
     div(phi,CO2)   bounded Gauss upwind;
     div(phi,N2)    bounded Gauss upwind;
     div(phi,N2O)   bounded Gauss upwind;
    div(phiV,CO)    bounded Gauss upwind;
    div(phiV,NO)    bounded Gauss upwind;
    div(phiV,O2)    bounded Gauss upwind;
    div(phiV,CO2)   bounded Gauss upwind;
    div(phiV,N2)    bounded Gauss upwind;
    div(phiV,N2O)   bounded Gauss upwind;*/
}

laplacianSchemes
{
    default         Gauss linear limited corrected 0.5;
//   default         Gauss linear uncorrected;
 
    laplacian(D,CO) Gauss linear limited corrected 0.5;

     laplacian(D,NO) Gauss linear limited corrected 0.5;
   laplacian(D,O2) Gauss linear limited corrected 0.5;
    laplacian(D,CO2) Gauss linear limited corrected 0.5;
    laplacian(D,N2) Gauss linear limited corrected 0.5;
    laplacian(D,N2O) Gauss linear limited corrected 0.5;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         limited corrected 0.5;
}

fluxRequired
{
    default         no;
    p;
}

wallDist
{
    method          meshWave;
    correctWalls    true;
}

// ************************************************************************* //
