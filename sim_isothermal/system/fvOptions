/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.1                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvOptions;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// reactions taken into account
// C0 + 0.5O2 -> CO2        (reaction01)
// CO + NO -> CO2 + 0.5N2   (reaction02)
// 0.5CO + NO -> CO2 + N2O  (reaction03)
// N2O -> N2 + 0.5O2        (reaction04)


// ON WALL COATING
reactionSourceCO
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceCO;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        coating;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // 0.5CO + NO -> CO2 + N2O  (reaction03)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        coating;

    	fields 		        (CO);

    	fieldNames	        (CO);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
            word currSpName("CO");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};
                    
        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceCOCoeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceO2
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceO2;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        coating;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        coating;

    	fields 		        (O2);

    	fieldNames	        (O2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
            word currSpName("O2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceO2Coeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceNO
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceNO;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        coating;
    
    // in reactions
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // 0.5CO + NO -> CO2 + N2O  (reaction03)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        coating;

    	fields 		        (NO);

    	fieldNames	        (NO);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
            word currSpName("NO");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceNOCoeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceN2O
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceN2O;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        coating;
    
    // in reactions
    // 0.5CO + NO -> CO2 + N2O  (reaction03)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        coating;

    	fields 		        (N2O);

    	fieldNames	        (N2O);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
            word currSpName("N2O");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceN2OCoeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceCO2
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceCO2;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        coating;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // 0.5CO + NO -> CO2 + N2O  (reaction03)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        coating;

    	fields 		        (CO2);

    	fieldNames	        (CO2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
            word currSpName("CO2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceCO2Coeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceN2
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceN2;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        coating;
    
    // in reactions
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        coating;

    	fields 		        (N2);

    	fieldNames	        (N2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("onWallProperties").lookup("coatingVolFrac")
                )
            );
            
             const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isOnWallCoat");
            
            word currSpName("N2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source            //load reaction source
            
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceN2Coeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}



// IN WALL
reactionSourceCOIW
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceCOIW;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        inWallPorosity;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // 0.5CO + NO -> CO2 + N2O  (reaction03)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        inWallPorosity;

    	fields 		        (CO);

    	fieldNames	        (CO);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("CO");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceCOIWCoeffs
    {
       selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceO2IW
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceO2IW;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        inWallPorosity;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        inWallPorosity;

    	fields 		        (O2);

    	fieldNames	        (O2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("O2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceO2IWCoeffs
    {
       selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceNOIW
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceNOIW;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        inWallPorosity;
    
    // in reactions
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // 0.5CO + NO -> CO2 + N2O  (reaction03)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        inWallPorosity;

    	fields 		        (NO);

    	fieldNames	        (NO);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("NO");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceNOIWCoeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}


reactionSourceN2OIW
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceN2OIW;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        inWallPorosity;
    
    // in reactions
    // 0.5CO + NO -> CO2 + N2O  (reaction03)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        inWallPorosity;

    	fields 		        (N2O);

    	fieldNames	        (N2O);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("N2O");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceN2OIWCoeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceCO2IW
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceCO2IW;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        inWallPorosity;
    
    // in reactions
    // C0 + 0.5O2 -> CO2        (reaction01)
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // 0.5CO + NO -> CO2 + N2O  (reaction03)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        inWallPorosity;

    	fields 		        (CO2);

    	fieldNames	        (CO2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("CO2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{  
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceCO2IWCoeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}

reactionSourceN2IW
{
    type            scalarCodedSource;	//scalarSemiImplicitSource
    active          yes;
    name	        reactionSourceN2IW;
    //~ selectionMode   all;
    selectionMode   cellZone;
    cellZone        inWallPorosity;
    
    // in reactions
    // CO + NO -> CO2 + 0.5N2   (reaction02)
    // N2O -> N2 + 0.5O2        (reaction04)

    scalarCodedSourceCoeffs
    {
        //~ selectionMode       all;
        selectionMode   cellZone;
        cellZone        inWallPorosity;

    	fields 		        (N2);

    	fieldNames	        (N2);
    	redirectType		sourceTime;

        codeInclude
        #{
            #include "fvCFD.H"
        #};

        codeCorrect
        #{
            Pout<< "**codeCorrect**" << endl;
        #};

        codeAddSup
        #{            
            #include "../../constant/rnTerms/loadCommonData.H"          //load data common to all the reactions
            
            scalar  coatingVolFrac(                                     //read volumetric fraction of coating
                readScalar(
                    transportProperties.subDict("inWallProperties").lookup("coatingVolFrac")
                )
            );
            
            const volScalarField& isCoat = mesh_.lookupObject<volScalarField>("isInWallCoat");
            
            word currSpName("N2");
            
            #include "../../constant/rnTerms/r_powerLawV3.H"                  //load reaction source
        #};

        codeSetValue
        #{
            //Pout<< "**codeSetValue**" << endl;
        #};

        // Dummy entry. Make dependent on above to trigger recompilation
        code
        #{
            $codeInclude
            $codeCorrect
            $codeAddSup
            $codeSetValue
        #};
    }

    reactionSourceN2IWCoeffs
    {
        selectionMode   cellZone;
        cellZone        coating;
    }
}


// ************************************************************************* //
